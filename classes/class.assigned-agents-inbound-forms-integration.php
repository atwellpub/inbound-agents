<?php

if(!class_exists('Inbound_Assigned_Agents_Inbound_Forms_Integration')){
	
	class Inbound_Assigned_Agents_Inbound_Forms_Integration{
	
		function __construct(){
			self::load_hooks();
		
		}
		
		public static function load_hooks(){
			
			/*add the forms settings*/
			add_filter('inboundnow_forms_settings', array(__CLASS__,'inbound_assigned_agents_add_settings' ));
			
			/*add the form scripts*/
			add_action('admin_enqueue_scripts', array(__CLASS__, 'inbound_assigned_agents_enqueue_form_scripts'));
			
			/*on form save, reset the rotation counter*/
			add_action('wp_ajax_save_form_agent_data', array(__CLASS__, 'ajax_save_form_agent_data'));
			
			/*add the option to notify agents by email*/
			add_action('wp_ajax_notify_assigned_agents_by_email', array(__CLASS__, 'ajax_notify_assigned_agents_by_email'));
		
		}
	
	
	
	
		public static function inbound_assigned_agents_add_settings($fields){
			
			$fields['forms']['options']['inbound_assign_agent_enable'] = array(
                        'name' => __('Enable Agent Assignment', 'inbound-pro'),
                        'desc' => __('Enable/Disable assigning agents to leads generated by this form.', 'inbound-pro'),
                        'type' => 'checkbox',
                        'std' => '',
                        'class' => 'main-form-settings exclude-from-refresh' );
			
	
			$fields['forms']['options']['inbound_assign_agent[]'] = array(
                        'name' => __('Assign to these agents:', 'inbound-pro'),
                        'desc' => __('Select the agents you want assigned to leads generated by this form.', 'inbound-pro'),
                        'type' => 'multiselect',
                        'std' => '',
                        'options' => Inbound_Assigned_Agents_Resources::$assigned_agents,
                        'class' => 'main-form-settings exclude-from-refresh' );
	
			$fields['forms']['options']['inbound_assign_to_agent_lead_group_enable'] = array(
                        'name' => __('Enable Agent Lead Group Assignment', 'inbound-pro'),
                        'desc' => __('Enable/Disable assigning generated leads to specific agent lead groups', 'inbound-pro'),
                        'type' => 'checkbox',
                        'std' => '',
                        'class' => 'main-form-settings exclude-from-refresh' );
	
			$fields['forms']['options']['inbound_assign_to_agent_lead_group[]'] = array(
                        'name' => __('Assign to these lead groups:', 'inbound-pro'),
                        'desc' => __('Select the lead groups to assign generated leads to. NOTE: This is a list of lead groups that the selected agents have in common, so only terms that ALL the selected agents have will be shown here.', 'inbound-pro'),
                        'type' => 'multiselect',
                        'std' => '1',
                        'options' => '',
                        'class' => 'main-form-settings exclude-from-refresh' );		
			
			$fields['forms']['options']['inbound_assign_notify_agents'] = array(
                        'name' => __('Enable Agent Lead Notification', 'inbound-pro'),
                        'desc' => __('Enable/Disable notifying assigned agents by email when a lead is generated', 'inbound-pro'),
                        'type' => 'checkbox',
                        'std' => '',
                        'class' => 'main-form-settings exclude-from-refresh' );		
		
		
		
				return $fields;
		}
	
	
		public static function inbound_assigned_agents_enqueue_form_scripts(){
			global $post;

			//Enqueue the scripts for Inbound Agent support
			if ((isset($post)&&'inbound-forms'=== $post->post_type)||( isset($_GET['post_type']) && $_GET['post_type']==='inbound-forms')) {
				$current_screen = get_current_screen();
				//This if() is so the script isn't active on the forms listing page in the admin area. So it won't work on pages generated by edit.php
				if($current_screen->base != 'edit'){
					/*assigned-agents-inbound-forms.js*/
					wp_enqueue_script('assigned-agents-inbound-forms-js', INBOUNDNOW_LEAD_ASSIGNMENTS_URLPATH . 'js/assigned-agents-inbound-forms.js' , false , true );
					wp_localize_script( 'assigned-agents-inbound-forms-js', 'inbound_assigned_agents_group_vars', array( 'ajaxurl' => admin_url( 'admin-ajax.php' ), 'inbound_shortcode_nonce' => wp_create_nonce('inbound-shortcode-nonce'), 'form_cpt' => 'on' ) );
					
					/*css*/
					wp_enqueue_style('assigned-agents-form-styles', INBOUNDNOW_LEAD_ASSIGNMENTS_URLPATH . 'css/assigned-agents-inbound-forms.css' , false , true );

				}
			}
		}

		/**
		 * Updates form agent data:
		 * Resets the agent rotation counter,
		 * Saves whether agents should be notified,
		 * Saves which groups the leads go to,
		 * On form save.
		 */
		public static function ajax_save_form_agent_data(){
			
			$check_nonce = wp_verify_nonce( $_POST['nonce'], 'inbound-shortcode-nonce' );
			if( !$check_nonce ) {
				exit;
			}

			if(isset($_POST['post_id']) && !empty($_POST['post_id'])){
			
				/**if no groups have been supplied, unset lead_group_enable**/
				if(isset($_POST['no_groups']) && $_POST['no_groups'] == true){
//					$form_values = get_post_meta($_POST['post_id'], 'inbound_form_values');
//					$new_form_values = str_replace('inbound_shortcode_inbound_assign_to_agent_lead_group_enable=on&', '', $form_values[0]);
//					update_post_meta($_POST['post_id'], 'inbound_form_values', $new_form_values);
// seems to be buggy, if not here, perhaps on the js side.
// since it's more of a nice feature than a mandate, I'll comment it, and we can reenable it when needed.
				}

				/*set the agent rotation counter to zero on form save*/
				update_post_meta((int)$_POST['post_id'], 'inbound_assign_agents_rotation_counter', 0);
				
				/*set whether agents should be notified by email on lead conversions*/
				update_post_meta((int)$_POST['post_id'], 'inbound_agents_notify_agents', (int)$_POST['notify_agents']);
				
				/*if there are groups*/
				if(!empty($_POST['agent_groups']) && $_POST['agent_groups'] != ''){
					/*sanitize groups*/
					$groups = array_map(function($groups){ return sanitize_text_field($groups); }, $_POST['agent_groups']);
					/*update the agent data*/
					update_post_meta((int)$_POST['post_id'], 'inbound_agents_notify_agent_groups', $groups);
				}else{
					/*else, clear the groups*/
					update_post_meta((int)$_POST['post_id'], 'inbound_agents_notify_agent_groups', '');
				}
			}
            

	//		echo json_encode($_POST);
			die();
		}
	
	}//end class


	new Inbound_Assigned_Agents_Inbound_Forms_Integration;

}




































?>
